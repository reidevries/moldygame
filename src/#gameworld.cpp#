#include "gameworld.h"
#include "blobobject.h"

GameWorld::GameWorld(int screenwidth, int screenheight) {
  this->screenwidth = screenwidth;
  this->screenheight = screenheight;
	
  Image parrots = LoadImage("texture/fairy/wink.png"); // Load image in CPU memory (RAM)

  // TTF Font loading with custom generation parameters
  font = LoadFontEx("font/Andika/Andika-R.ttf", 64, 0, 0);
	
  // Image converted to texture, uploaded to GPU memory (VRAM), and emplaced into vector of GameObject
  texturebuffer.emplace_back(LoadTextureFromImage(parrots));
  //gameobjectbuffer.emplace_back((std::string)"parrots", &texturebuffer[0], 1, (Vector2){ (float)(screenwidth/2 - 200), (float)(screenheight/2 - 200) });
	
  VectorFan* v = new VectorFan((Vector2){200,200}, 69, 5);
  BlobObject* b = new BlobObject(*v, 1);
  gameobjectbuffer.push_back(b);
	
  UnloadImage(parrots);   // Once image has been converted to texture and uploaded to VRAM, it can be unloaded from RAM
}

void GameWorld::render() {
  BeginDrawing();

  ClearBackground(RAYWHITE);
  for (std::vector<GameObject*>::iterator it = gameobjectbuffer.begin(); it != gameobjectbuffer.end(); it++) {
    (*it)->draw();
  }
	
  for (std::vector<TextureSprite>::iterator it = uitexturebuffer.begin(); it != uitexturebuffer.end(); it++) {
    it->draw((Vector2){ (float)(screenwidth/2 - 200), (float)(screenheight/2 - 200) });
  }

  // Draw text directly using sprite font
  DrawTextEx(font, "hellooo popyp", (Vector2){ 20, 300}, (float)font.baseSize, 0.0f, BLACK);

  EndDrawing();
}

GameWorld::~GameWorld() {
  gameobjectbuffer.clear();
  UnloadFont(font);           // Unload custom spritefont
}
